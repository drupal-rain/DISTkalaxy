<?php

/**
 * @file
 * entityreference_autocomplete module.
 * A Form API element type to reference arbitrary entities through an
 * autocomplete textfield.
 */

/**
 * Value for 'entityreference' to indicate a field accepts unlimited values.
 */
define('ERA_CARDINALITY_UNLIMITED', -1);

/**
 * Implements hook_menu().
 */
function entityreference_autocomplete_menu() {
  $items['entityreference_autocomplete/autocomplete/%/%entityreference_autocomplete_bundles/%'] = array(
    'title' => 'Entity Reference Element autocomplete callback',
    'page callback' => 'entityreference_autocomplete_autocomplete_callback',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('access content'),
    'file' => 'includes/autocomplete_callback.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Returns a list of bundles from the entityreference_autocomplete path.
 *
 * @return array
 *   The different bundles extracted from the autocomplete path.
 */
function entityreference_autocomplete_bundles_load($bundles_string) {
  return ($bundles_string == '*') ? NULL : explode('+', $bundles_string);
}

/**
 * Implements hook_element_info().
 */
function entityreference_autocomplete_element_info() {
  $types['entityreference'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#autocomplete_path' => FALSE,
    '#value_callback' => 'entityreference_autocomplete_value_callback',
    '#process' => array('ajax_process_form', 'entityreference_autocomplete_process_entityreference'),
    '#element_validate' => array('entityreference_autocomplete_validate_entityreference'),
    '#theme' => 'textfield',
    '#theme_wrappers' => array('form_element'),
    // Custom attributes. Set to false so that nothing happens if a dev doesn't
    // specify them.
    '#era_entity_type' => FALSE,
    '#era_bundles' => FALSE,
    '#era_cardinality' => 1,
    // Specify some sensible defaults for the number of results returned.
    '#era_query_settings' => array(
      'limit' => '50',
    ),
  );
  return $types;
}

/**
 * Form element value callback for 'entityreference' element type.
 *
 * Turns the #default_value (entity ids expected) into proper reference labels,
 * leaving the references in the same way that they would be returned by the
 * autocomplete callback.
 *
 * @param $element
 *   An associative array containing the properties of the element.
 * @param $edit
 *   If the form has been submitted, the value submitted for the element.
 * @param $form_state
 *   An associative array containing the $form_state properties.
 *
 * @return
 *   The value to be placed in $element['#value'].
 *
 * @see entityreference_autocomplete_element_info()
 */
function entityreference_autocomplete_value_callback($element, $edit = FALSE, &$form_state) {
  // Just process the value when $edit comes as FALSE (no form submission).
  if ($edit === FALSE) {
    // If there are any default values, transform them into proper labels.
    if (!empty($element['#default_value'])) {
      // Only one entity referenced.
      if (is_numeric($element['#default_value'])) {
        $references_label = entityreference_autocomplete_label_for_reference($element['#era_entity_type'], $element['#default_value']);
      }
      // Multiple entities referenced.
      else if (is_array($element['#default_value'])) {
        $referenced_labels = array();
        foreach ($element['#default_value'] as $entity_id) {
          $referenced_labels[] = entityreference_autocomplete_label_for_reference($element['#era_entity_type'], $entity_id);
          $references_label = implode(', ', array_filter($referenced_labels));
        }
      }

      // Labels assembled.
      if (!is_null($references_label)) {
        return $references_label;
      }
      // This should never be reached, but if it's, return whatever default
      // value was specified.
      else {
        return $element['#default_value'];
      }
    }
  }
  // The user submitted a value for the element. Return it as is.
  return $edit;
}

/**
 * Form element processing handler for the 'entityreference' element type.
 *
 * @param $element
 *   An associative array containing the properties of the element.
 *
 * @return
 *   The processed element.
 *
 * @see entityreference_autocomplete_element_info()
 */
function entityreference_autocomplete_process_entityreference($element, &$form_state) {
  if ($element['#era_entity_type']) {
    // Set the autocomplete path based on the entity type to look for.
    $autocomplete_path = 'entityreference_autocomplete/autocomplete/' . $element['#era_entity_type'];

    // If there's bundle filtering, add it. Otherwise, set a wildcard. Also,
    // force the property to be an array.
    if (!empty($element['#era_bundles']) && is_array($element['#era_bundles'])) {
      $autocomplete_path .= '/' . implode('+', $element['#era_bundles']);
    }
    else {
      $autocomplete_path .= '/*';
    }

    $autocomplete_path .= '/' . urlencode(http_build_query($element['#era_query_settings']));
    $element['#autocomplete_path'] = $autocomplete_path;
  }
  return $element;
}

/**
 * Form element validation handler for entityreference elements.
 *
 * Note that #required is validated by core.
 */
function entityreference_autocomplete_validate_entityreference(&$element, &$form_state) {
  $labels_string = $element['#value'];
  $entity_labels = drupal_explode_tags($labels_string);
  $values = array();
  $error = FALSE;

  // If there are more values than the allowed, set an error and return. No need
  // to validate each of the values.
  if (($element['#era_cardinality'] !== ERA_CARDINALITY_UNLIMITED) && count($entity_labels) > $element['#era_cardinality']) {
    form_error($element, t('The "!field" field can\'t contain more than !cardinality !format_plural_values.',
      array(
        '!field' => t($element['#title']),
        '!cardinality' => $element['#era_cardinality'],
        '!format_plural_values' => format_plural($element['#era_cardinality'], 'value', 'values')
      )));
    return;
  }

  foreach ($entity_labels as $label) {
    if (preg_match("/.+\((\d+)\)/", $label, $matches)) {
      $entity_id = $matches[1];

      // Load the referenced entity.
      $entity = entity_load_single($element['#era_entity_type'], $entity_id);
      list(,, $bundle) = entity_extract_ids($element['#era_entity_type'], $entity);

      // If the value entered doesn't reference an entity, or has been badly
      // entered, trigger an error.
      if (!$entity) {
        $error = TRUE;
        break;
      }
      // Value entered properly, and refers to an existing entity.
      else {
        // User doesn't have read (view) access to it, set an error.
        if (!entity_access('view', $element['#era_entity_type'], $entity)) {
          $error = TRUE;
          break;
        }
        // If a specific bundle type was specified.
        else if ($element['#era_bundles'] && !in_array($bundle, $element['#era_bundles'])) {
          // Invalid bundle, set an error.
          $error = TRUE;
          break;
        }

        // Finally, check if the entity label is the same as the one entered by the user.
        list($entity_label) = preg_split("/\s\((\d+)\)$/", $label);
        if (entity_label($element['#era_entity_type'], $entity) !== $entity_label) {
          $error = TRUE;
          break;
        }
      }

      // Return some basic context of the entity referenced by the user.
      $values[$entity_id] = array(
        'entity_id' => $entity_id,
        'entity_label' => entity_label($element['#era_entity_type'], $entity),
        'entity_type' => $element['#era_entity_type'],
        'entity_bundle' => $bundle,
      );
    }
    else {
      $error = TRUE;
      break;
    }
  }
  // If an error has been triggered, display it on the form.
  if ($error) {
    form_error($element, t('The "!field" field contains an invalid value.', array('!field' => t($element['#title']))));
  }
  // No errors, so update the value of the entityreference element.
  else {
    // If there's only one allowed, return values into the element's index.
    $values = ($element['#era_cardinality'] === 1) ? current($values) : $values;
    form_set_value($element, $values, $form_state);
  }
}

/**
 *  Returns the label to be set for a reference field.
 *
 * @param $entity_type
 *   The type of the entity being referenced.
 * @param $entity_id
 *   The ID of the Entity being referenced.
 * @param $quote_wrap
 *   Whether the label should be wrapped within quotes if it contains commas or
 *   quotes. defaults to TRUE.
 *
 * @return String
 *   The assembled label for the reference.
 */
function entityreference_autocomplete_label_for_reference($entity_type, $entity_id, $quote_wrap = TRUE) {
  if ($entity_referenced = entity_load_single($entity_type, $entity_id)) {
    $reference_label = entity_label($entity_type, $entity_referenced) . ' (' . $entity_id . ')';

    // Names containing commas or quotes must be wrapped in quotes.
    if ($quote_wrap) {
      if (strpos($reference_label, ',') !== FALSE || strpos($reference_label, '"') !== FALSE) {
        $reference_label = '"' . str_replace('"', '""', $reference_label) . '"';
      }
    }
    return $reference_label;
  }
  // No entity object loaded, so return NULL.
  else {
    return NULL;
  }
}
